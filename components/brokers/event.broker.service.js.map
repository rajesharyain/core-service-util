{"version":3,"file":"event.broker.service.js","sourceRoot":"","sources":["event.broker.service.ts"],"names":[],"mappings":"OAAO,EAAE,UAAU,EAAE,MAAM,eAAe;OAEnC,EAAE,OAAO,EAAE,MAAS,cAAc;AAczC;IACI,uBAAoB,aAA2B;QAA3B,kBAAa,GAAb,aAAa,CAAc;IAC/C,CAAC;IACM,8BAAM,GAAb;QACI,IAAI,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC;IACrC,CAAC;IACL,oBAAC;AAAD,CAAC,AAND,IAMC;AAED;IAEI,uBAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,OAAO,EAAK,CAAC;IACrC,CAAC;IACM,4BAAI,GAAX,UAAa,IAAO;QAChB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC;IACM,8BAAM,GAAb,UAAc,IAAwB;QAClC,MAAM,CAAC,IAAI,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAE,IAAI,CAAE,CAAC,CAAC;IAC9D,CAAC;IACL,oBAAC;AAAD,CAAC,AAXD,IAWC;AAED;IAII;QACI,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACtB,CAAC;IACM,qCAAQ,GAAf,UAAmB,SAAiB;QAChC,IAAI,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACpC,EAAE,CAAC,CAAE,OAAO,KAAK,KAAK,WAAY,CAAC,CAAC,CAAC;YACjC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,IAAI,aAAa,CAAI,SAAS,CAAC,CAAC;QACtE,CAAC;QACD,MAAM,CAAC,KAAyB,CAAC;IACrC,CAAC;IACM,mCAAM,GAAb,UAAiB,SAAiB,EAAE,IAAwB;QACxD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAI,SAAS,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IACM,iCAAI,GAAX,UAAe,SAAiB,EAAE,IAAO;QACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAI,SAAS,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IACE,6BAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,iCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IACF,yBAAC;AAAD,CAAC,AA1BD,IA0BC","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subscription } from 'rxjs/Subscription';\r\nimport { Subject }    from 'rxjs/Subject';\r\n\r\ninterface IEventListener {\r\n    ignore() : void;\r\n}\r\ninterface IBrokeredEventBase {\r\n    name:string;\r\n    emit( data: any ): void;\r\n    listen( next: (data: any) => void ): IEventListener;\r\n}\r\ninterface IBrokeredEvent<T> extends IBrokeredEventBase  {\r\n    emit( data: any ): void;\r\n    listen( next: (data: any) => void ): IEventListener;\r\n}\r\nclass EventListener implements IEventListener {\r\n    constructor( public _subscription: Subscription ) {\r\n    }\r\n    public ignore() : void {\r\n        this._subscription.unsubscribe();\r\n    }\r\n}\r\n\r\nclass BrokeredEvent<T> implements IBrokeredEvent<T> {\r\n    _subject: Subject<T>;\r\n    constructor( public name: string ) {\r\n        this._subject = new Subject<T>();\r\n    }\r\n    public emit( data: T ): void {\r\n        this._subject.next(data);\r\n    }\r\n    public listen(next: (value: T) => void): IEventListener {\r\n        return new EventListener(this._subject.subscribe( next ));\r\n    }\r\n}\r\n\r\nexport class EventBrokerService {\r\n    //_events: { [name: string]: IBrokeredEventBase };\r\n    _events: any;\r\n    \r\n    constructor() {\r\n        this._events = {};\r\n    }\r\n    public register<T>(eventName: string ) : any {//BrokeredEvent<T>\r\n        var event = this._events[eventName];\r\n        if ( typeof event === 'undefined' ) {\r\n            event = this._events[eventName] = new BrokeredEvent<T>(eventName);\r\n        }\r\n        return event as BrokeredEvent<T>;\r\n    }\r\n    public listen<T>(eventName: string, next: (value: T) => void) : any {//IEventListener\r\n        return this.register<T>(eventName).listen(next);\r\n    }\r\n    public emit<T>(eventName: string, data: T) : void {\r\n        return this.register<T>(eventName).emit(data);\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}