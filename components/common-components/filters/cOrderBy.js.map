{"version":3,"file":"cOrderBy.js","sourceRoot":"","sources":["cOrderBy.ts"],"names":[],"mappings":"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","sourcesContent":["import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n\r\nexport class COrderByPipe implements PipeTransform {\r\n\r\n    value:string[] =[];\r\n\r\n    static _orderByComparator(a:any, b:any):number{\r\n        if(a === null || typeof a === 'undefined') a = \"\";\r\n        if(b === null || typeof b === 'undefined') b = \"\";\r\n\r\n        if((isNaN(parseFloat(a)) || !isFinite(a)) || (isNaN(parseFloat(b)) || !isFinite(b))){\r\n            //Isn't a number so lowercase the string to properly compare\r\n            if(a.toLowerCase() < b.toLowerCase()) return -1;\r\n            if(a.toLowerCase() > b.toLowerCase()) return 1;\r\n        }\r\n        else{\r\n            //Parse strings as numbers to compare properly\r\n            if(parseFloat(a) < parseFloat(b)) return -1;\r\n            if(parseFloat(a) > parseFloat(b)) return 1;\r\n        }\r\n\r\n        return 0; //equal each other\r\n    }\r\n\r\n    transform(input:any, config:string = '+'): any{\r\n\r\n        if(input) {\r\n            //make a copy of the input's reference\r\n            this.value = [...input];\r\n            var value = this.value;\r\n            \r\n            if(!Array.isArray(value)) return value;\r\n    \r\n            if(!Array.isArray(config) || (Array.isArray(config) && config.length == 1)){\r\n                var propertyToCheck:string = !Array.isArray(config) ? config : config[0];\r\n                var desc = propertyToCheck.substr(0, 1) == '-';\r\n                \r\n                //Basic array\r\n                if(!propertyToCheck || propertyToCheck == '-' || propertyToCheck == '+'){\r\n                    return !desc ? value.sort() : value.sort().reverse();\r\n                }\r\n                else {\r\n                    var property:string = propertyToCheck.substr(0, 1) == '+' || propertyToCheck.substr(0, 1) == '-'\r\n                        ? propertyToCheck.substr(1)\r\n                        : propertyToCheck;\r\n    \r\n                    return value.sort(function(a:any,b:any){\r\n                        return !desc \r\n                            ? COrderByPipe._orderByComparator(a[property], b[property]) \r\n                            : -COrderByPipe._orderByComparator(a[property], b[property]);\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                //Loop over property of the array in order and sort\r\n                return value.sort(function(a:any,b:any){\r\n                    for(var i:number = 0; i < config.length; i++){\r\n                        var desc = config[i].substr(0, 1) == '-';\r\n                        var property = config[i].substr(0, 1) == '+' || config[i].substr(0, 1) == '-'\r\n                            ? config[i].substr(1)\r\n                            : config[i];\r\n    \r\n                        var comparison = !desc \r\n                            ? COrderByPipe._orderByComparator(a[property], b[property]) \r\n                            : -COrderByPipe._orderByComparator(a[property], b[property]);\r\n                        \r\n                        //Don't return 0 yet in case of needing to sort by next property\r\n                        if(comparison != 0) return comparison;\r\n                    }\r\n    \r\n                    return 0; //equal each other\r\n                });\r\n            }\r\n        }\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{name: 'cOrderBy', pure: false}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}