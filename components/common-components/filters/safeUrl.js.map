{"version":3,"file":"safeUrl.js","sourceRoot":"","sources":["safeUrl.ts"],"names":[],"mappings":"OAAO,EAAE,IAAI,EAAiB,MAAM,EAAC,MAAM,eAAe;OACnD,EAAE,YAAY,EAAC,MAAM,2BAA2B;AAGvD;IACE,qBAAqB,SAAuB;QAAvB,cAAS,GAAT,SAAS,CAAc;IAAG,CAAC;IAChD,+BAAS,GAAT,UAAU,GAAQ;QAChB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC;IAC5D,CAAC;IACI,sBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAG,EAAE;KAC5C,CAAC;IACF,kBAAkB;IACX,0BAAc,GAAmE,cAAM,OAAA;QAC9F,EAAC,IAAI,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,YAAY,EAAG,EAAE,EAAG,EAAC;KAC7E,EAF6F,CAE7F,CAAC;IACF,kBAAC;AAAD,CAAC,AAZD,IAYC","sourcesContent":["import { Pipe, PipeTransform, Inject} from '@angular/core';\r\nimport { DomSanitizer} from '@angular/platform-browser';\r\n\r\n\r\nexport class SafeUrlPipe implements PipeTransform {\r\n  constructor( private sanitizer: DomSanitizer) {}\r\n  transform(url: any): any {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n  }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Pipe, args: [{ name: 'safeUrl' }, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: DomSanitizer, decorators: [{ type: Inject, args: [DomSanitizer, ] }, ]},\n];\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}